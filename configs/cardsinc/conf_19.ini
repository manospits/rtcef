[default]
ProjectPath = /home/manospits/projects/onfore
pattern_file = ${default:ProjectPath}/libraries/models/wrappers/patterns/cardsinc/pattern.sre
declaration_file = ${default:ProjectPath}/libraries/models/wrappers/patterns/cardsinc/declarations.sre
distance_min = -1.0
distance_max = -1.0

[kafka]
all.bootstrap_servers = localhost:9092
custom.producer.key_serializer = json
custom.producer.value_serializer = json
custom.consumer.key_deserializer = json
custom.consumer.value_deserializer = json
consumer.max_poll_interval_ms = 300000
consumer.enable_auto_commit = true
consumer.auto_offset_reset = earliest
producer.batch_size = 200000
producer.linger_ms = 50
producer.acks = all
producer.compression_type = lz4

[kafka.recordSchemas]
Schema.OptimiserInstructions = ${default:ProjectPath}/schemas/schemas_cards/optimiser_instructions
Schema.FactoryCommands = ${default:ProjectPath}/schemas/schemas_cards/factory_commands
Schema.FactoryReports = ${default:ProjectPath}/schemas/schemas_cards/factory_reports
Schema.DatasetVersions = ${default:ProjectPath}/schemas/schemas_cards/dataset_versions
Schema.AssembledDatasets = ${default:ProjectPath}/schemas/schemas_cards/assembled_datasets
Schema.Models = ${default:ProjectPath}/schemas/schemas_cards/model_versions
Schema.InputStream = ${default:ProjectPath}/schemas/schemas_cards/input_stream
Schema.OutputStream = ${default:ProjectPath}/schemas/schemas_cards/output_stream
Schema.ModelScoreReports = ${default:ProjectPath}/schemas/schemas_cards/model_runtime_scores
Schema.EnginePosition = ${default:ProjectPath}/schemas/schemas_cards/engine_current_position
Schema.EngineSync = ${default:ProjectPath}/schemas/schemas_cards/engine_sync

[kafka.topics]
topic.OptimiserInstructions = optimiser_instructions
topic.FactoryCommands = factory_commands
topic.FactoryReports = factory_reports
topic.DatasetVersions = dataset_versions
topic.Models = model_versions
topic.InputStream = input_stream
topic.OutputStream = output_stream
topic.ModelScoreReports = model_runtime_scores
topic.EnginePosition = engine_current_position
topic.AssembledDatasets = assembled_datasets
topic.EngineSync = engine_sync



[optimiser]
library = skopt
; order here of parameters is important for skopt
hyper.confidence.min = 0.0
hyper.confidence.max = 1.0
hyper.order.min = 1
hyper.order.max = 5
hyper.pmin.min = 0.0001
hyper.pmin.max = 0.01
hyper.gamma.min = 0.0001
hyper.gamma.max = 0.01
; [1, 0.19561029597236337, 0.000568801392801762, 0.006780932008025942]
init.model.param.confidence =  0.19561029597236337
init.model.param.order = 1
init.model.param.pmin = 0.000568801392801762
init.model.param.gamma = 0.006780932008025942
nInitBench = 10
nTotalEvals = 20
keepNEvals = 5
reuse = true
acquisitionFunction = gp_hedge
optimisationLogs = ${default:ProjectPath}/logs/experiments/optimisation/
optimisationSamples = ${default:ProjectPath}/logs/experiments/samples/
optimisationModels = ${default:ProjectPath}/data/saved_models/optimisation/
initialModel = ${default:ProjectPath}/data/saved_models/optimisation/skopt_model_cards_driftIncGPH_0_sv_nnv_m_nt_c_month_trm_19.pkl
executionLog = ${default:ProjectPath}/logs/execution/optimiser_service.log
seed = 1234
syncEngine = true

[optimiser.topics]
Input.Instructions = ${kafka.topics:topic.OptimiserInstructions}
Output.Commands = ${kafka.topics:topic.FactoryCommands}
Input.Reports = ${kafka.topics:topic.FactoryReports}
Output.EngineSync = ${kafka.topics:topic.EngineSync}


[optimiser.topics.schemas]
Input.Instructions = ${kafka.recordSchemas:Schema.OptimiserInstructions}
Output.Commands = ${kafka.recordSchemas:Schema.FactoryCommands}
Input.Reports = ${kafka.recordSchemas:Schema.FactoryReports}
Output.EngineSync = ${kafka.recordSchemas:Schema.EngineSync}

[optimiser.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro


[engine]
executionLog = ${default:ProjectPath}/logs/execution/engine_service.log
updatePosition = 100
model.wayebJar = ${default:ProjectPath}/libraries/models/wrappers/wayeb/target/scala-2.12/wayeb-0.3.0-SNAPSHOT.jar
model.param.java_port = 25336
model.param.python_port = 25335
model.param.k_val = 1
model.param.pattern_file = ${default:pattern_file}
model.param.declaration_file = ${default:declaration_file}
model.param.initial_model = ${default:ProjectPath}/data/saved_models/forecasting/wayeb_model_cards_driftIncGPH_0_sv_nnv_c_month_trm_19.spst
model.param.confidence_threshold = ${optimiser:init.model.param.confidence}
model.param.reporting_dt = 604800000
model.param.start_time = 1466121613335
model.param.distance_min = ${default:distance_min}
model.param.distance_max = ${default:distance_max}
model.param.domain = cardsOOF
schemasPath =  ${default:ProjectPath}/schemas/schemas_cards/


[engine.topics]
Input.InputStream = ${kafka.topics:topic.InputStream}
Input.Models = ${kafka.topics:topic.Models}
Input.EngineSync = ${kafka.topics:topic.EngineSync}
Output.OutputStream = ${kafka.topics:topic.OutputStream}
Output.ScoreReports = ${kafka.topics:topic.ModelScoreReports}
Output.EnginePosition = ${kafka.topics:topic.EnginePosition}


[engine.topics.schemas]
Input.InputStream = ${kafka.recordSchemas:Schema.InputStream}
Input.Models = ${kafka.recordSchemas:Schema.Models}
Input.EngineSync = ${kafka.recordSchemas:Schema.EngineSync}
Output.OutputStream = ${kafka.recordSchemas:Schema.OutputStream}
Output.ScoreReports = ${kafka.recordSchemas:Schema.ModelScoreReports}
Output.EnginePosition = ${kafka.recordSchemas:Schema.EnginePosition}


[engine.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro

[factory]
executionLog = ${default:ProjectPath}/logs/execution/factory_service.log
assembledDatasetsPath = ${default:ProjectPath}/data/assembled/
model = wayeb
savedModelsPath = ${default:ProjectPath}/data/saved_models/forecasting
model.param.java_port = 25334
model.param.python_port = 25333
model.param.k_val = 1
model.param.weight_0 = 1
model.param.weight_1 = 0
model.param.threshold_time = 10000
model.param.pattern_path = ${default:pattern_file}
model.param.declaration_path = ${default:declaration_file}
model.param.domain = cardsjson
model.param.objective_func = nt
model.param.distance_min = ${default:distance_min}
model.param.distance_max = ${default:distance_max}
trainPercent = 0.7
time = millisec

[factory.topics]
Input.CommandsTopic = ${kafka.topics:topic.FactoryCommands}
Input.Datasets = ${kafka.topics:topic.DatasetVersions}
Output.ReportsTopic = ${kafka.topics:topic.FactoryReports}
Output.Models = ${kafka.topics:topic.Models}
Output.AssembledDatasets = ${kafka.topics:topic.AssembledDatasets}

[factory.topics.schemas]
Input.CommandsTopic = ${kafka.recordSchemas:Schema.FactoryCommands}
Output.ReportsTopic = ${kafka.recordSchemas:Schema.FactoryReports}
Output.Models = ${kafka.recordSchemas:Schema.Models}
Input.Datasets = ${kafka.recordSchemas:Schema.DatasetVersions}
Output.AssembledDatasets = ${kafka.recordSchemas:Schema.AssembledDatasets}

[factory.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro


[observer]
; Method = difference / regression
Method = regression
; K = 2 for difference / regression should use at least 3-4
K = 3
SlopeThreshold = -0.025
recentTrainThreshold = 4
LowScoreThreshold = 0.2
TrainD = 0.025
HOptD = 0.1
ScoreField = mcc
TimeField = timestamp
; MetricsType can be either  `batch_metrics' or `runtime_metrics'
MetricsType = batch_metrics
executionLog = ${default:ProjectPath}/logs/execution/observer_service.log

[observer.topics]
Input.ModelScores = ${kafka.topics:topic.ModelScoreReports}
Output.Instructions = ${kafka.topics:topic.OptimiserInstructions}

[observer.topics.schemas]
Input.ModelScores = ${kafka.recordSchemas:Schema.ModelScoreReports}
Output.Instructions = ${kafka.recordSchemas:Schema.OptimiserInstructions}

[observer.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro


[collector]
Method = fixed
BucketType = time
BucketsNumber = 9
BucketSize = 604800000
CollectionMethod = lastk
;CollectionMethod = scorebased
K = 4
StoragePath = ${default:ProjectPath}/data/collected/
Naming = dt_bucket_
TimeField = timestamp
executionLog = ${default:ProjectPath}/logs/execution/collector_service.log

[collector.topics]
Input.InputStream = ${kafka.topics:topic.InputStream}
Input.EnginePosition = ${kafka.topics:topic.EnginePosition}
Input.AssembledDatasets = ${kafka.topics:topic.AssembledDatasets}
Output.DatasetVersions = ${kafka.topics:topic.DatasetVersions}
Input.ModelScores = ${kafka.topics:topic.ModelScoreReports}

[collector.topics.schemas]
Input.InputStream = ${kafka.recordSchemas:Schema.InputStream}
Input.EnginePosition = ${kafka.recordSchemas:Schema.EnginePosition}
Input.AssembledDatasets = ${kafka.recordSchemas:Schema.AssembledDatasets}
Output.DatasetVersions = ${kafka.recordSchemas:Schema.DatasetVersions}
Input.ModelScores = ${kafka.recordSchemas:Schema.ModelScoreReports}


[collector.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro


[replayer]
DatasetPath = ${default:ProjectPath}/data/input/trx.json
PeriodSize = 28
Time = millisec
; periods start from 0
StartPeriod = 19
StartTime = 1463702413335
EndTime = 1513579522400
cyclic = true
domain = cards

[replayer.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro

[replayer.topics]
Output.InputStream =  ${kafka.topics:topic.InputStream}

[replayer.topics.schemas]
Output.InputStream =  ${kafka.recordSchemas:Schema.InputStream}

[reader]
outputFolder =  ${default:ProjectPath}/data/reader/

[reader.kafka]
custom.producer.key_serializer = avro
custom.producer.value_serializer = avro
custom.consumer.key_deserializer = avro
custom.consumer.value_deserializer = avro

[reader.topics]
Input.ScoreReports = ${kafka.topics:topic.ModelScoreReports}
Input.Instructions = ${kafka.topics:topic.OptimiserInstructions}
Input.CommandsTopic = ${kafka.topics:topic.FactoryCommands}
Input.Reports = ${kafka.topics:topic.FactoryReports}
Input.Models = ${kafka.topics:topic.Models}
Input.Datasets = ${kafka.topics:topic.DatasetVersions}


[reader.topics.schemas]
Input.Instructions = ${kafka.recordSchemas:Schema.OptimiserInstructions}
Input.ScoreReports = ${kafka.recordSchemas:Schema.ModelScoreReports}
Input.CommandsTopic = ${kafka.recordSchemas:Schema.FactoryCommands}
Input.Reports = ${kafka.recordSchemas:Schema.FactoryReports}
Input.Models = ${kafka.recordSchemas:Schema.Models}
Input.Datasets = ${kafka.recordSchemas:Schema.DatasetVersions}
